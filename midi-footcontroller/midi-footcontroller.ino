#include <Adafruit_SSD1306.h>
//  Arduino Footcontroller for Behringer V-Amp Pro
//
//  Created by Florian Spies
//  Copyright (c) 2017 Florian Spies. All rights reserved.
//
#include <Adafruit_GFX.h>
#include <gfxfont.h>
#include <MIDI.h>
#include <Bounce2.h>
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

static const unsigned char PROGMEM logo[] =
{
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x1,0x83,0x0,0x0,0x7e,0x40,0x0,0x0,0x18,0x0,0x0,0x0,0x1,0x0,
0x0,0x0,0x6,0x1,0xc0,0x0,0x60,0x40,0x0,0x0,0x18,0x0,0x0,0x0,0x1,0x0,
0x0,0x0,0x18,0x0,0xe0,0x0,0x60,0x43,0x81,0xc2,0x5b,0x3,0x3,0x89,0x19,0x0,
0x0,0x1,0xf0,0x0,0x60,0x0,0x60,0x46,0xc3,0x63,0xdd,0x8f,0xcc,0xcf,0x37,0x0,
0x0,0x3,0xe8,0x0,0x60,0x0,0x7e,0x4c,0x66,0x23,0x18,0xc8,0x40,0xcc,0x23,0x0,
0x0,0x3,0xe0,0x0,0x20,0x0,0x60,0x4c,0x24,0x32,0x18,0xc8,0x40,0xcc,0x61,0x0,
0x0,0x7,0xc0,0x0,0x30,0x0,0x60,0x4c,0x24,0x32,0x10,0xd8,0x4e,0xcc,0x61,0x0,
0x0,0x3,0x8e,0x3f,0x30,0x0,0x60,0x4c,0x66,0x32,0x18,0xc8,0x48,0xcc,0x21,0x0,
0x0,0x3,0xfc,0x7d,0xb0,0x0,0x60,0x46,0x46,0x62,0x19,0x8c,0xc8,0xcc,0x33,0x0,
0x0,0x2,0x70,0x7c,0xa0,0x0,0x60,0x43,0x83,0xc2,0x17,0x7,0x8f,0xcc,0x1d,0x0,
0x0,0x4,0x34,0xfc,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0xc,0x0,0xf0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0xf,0xc0,0x70,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x18,0x7c,0xc,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x10,0x3,0xc0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x30,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x20,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x20,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x60,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x40,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0xd,0x80,0x30,0x0,0x0,0x0,0x0,
0x0,0xc0,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0x18,0xc0,0xf0,0x0,0x0,0x0,0x0,
0x0,0xc0,0x0,0x81,0x0,0x0,0x0,0x0,0x0,0x18,0xc0,0x30,0x0,0x0,0x0,0x0,
0x0,0x80,0x0,0xb3,0x0,0x0,0x0,0x0,0x0,0x18,0xc0,0x30,0x0,0x0,0x0,0x0,
0x0,0x80,0x1,0x22,0x0,0x1,0xa0,0x0,0x0,0x18,0xc0,0x30,0x0,0x0,0x0,0x0,
0x0,0x80,0x1,0x22,0x0,0x3,0x10,0x0,0x0,0x18,0xc0,0x30,0x0,0x0,0x0,0x0,
0x0,0x80,0x1,0x26,0x0,0x6,0x10,0x0,0x0,0x8,0xc0,0x30,0x0,0x0,0x0,0x0,
0x0,0x80,0x1,0x46,0x0,0x4,0x10,0x0,0x0,0xd,0x98,0x30,0x0,0x0,0x0,0x0,
0x0,0x80,0x2,0x44,0x0,0x8,0x20,0x0,0x0,0x7,0x18,0x30,0x0,0x0,0x0,0x0,
0x0,0x80,0x2,0xc4,0x0,0x10,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x80,0x0,0x87,0xfe,0x20,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x80,0x0,0x84,0x3,0x40,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x80,0x1,0x4,0x61,0x81,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0xc0,0x5,0x0,0x21,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x40,0x8,0x80,0xff,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x40,0x0,0x0,0x3,0x86,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x40,0x2,0x40,0x0,0xc1,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x60,0xb,0x80,0x0,0x60,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x20,0x4,0x0,0x20,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x30,0x0,0x0,0x0,0x23,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x10,0x0,0x0,0x0,0x21,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x18,0x0,0x0,0x80,0x20,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x4,0x0,0x0,0x0,0x20,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x7,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x4,0xc0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2,0x88,0xf0,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2,0x51,0x1f,0x0,0x43,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2,0x32,0x3,0xc0,0x6,0x2,0x1,0x0,0x0,0x0,0x48,0x0,0x4,0x0,0x10,0x10,
0x0,0x4,0x0,0x4f,0xf8,0x2,0x1,0x0,0x0,0x0,0x40,0x0,0x4,0x0,0x10,0x10,
0x1,0x8,0xe,0x88,0x0,0x4,0x31,0x80,0xc3,0x82,0x49,0x61,0xa4,0xc3,0x10,0x90,
0x0,0x10,0xf,0x80,0x0,0x4,0x48,0x81,0x26,0xcc,0xc9,0xb3,0x67,0xc5,0x93,0x30,
0x0,0xe0,0xc,0x10,0x0,0x4,0x80,0x82,0x4,0x48,0xc9,0x12,0x26,0x68,0x92,0x30,
0x0,0x40,0x4,0x10,0x0,0x4,0x80,0x82,0x4,0x68,0x49,0x12,0x24,0x6f,0xd2,0x10,
0x0,0x0,0x4,0x20,0x0,0x4,0x80,0x82,0x4,0x68,0x49,0x12,0x24,0x68,0x12,0x10,
0x0,0x0,0x2,0x20,0x0,0x4,0xc8,0x83,0x26,0x4c,0xc9,0x13,0x64,0x6c,0x93,0x30,
0x0,0x0,0x3,0x40,0x0,0x4,0x71,0x81,0xc3,0x87,0xc9,0x10,0x24,0x67,0x11,0xf0,
0x0,0x0,0x1,0x80,0x0,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x2,0x1,0x0,0x0,0x0,0x0,0x1,0xe0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};


#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

Bounce buttonA = Bounce(35, 10);
Bounce buttonB = Bounce(37, 10);
Bounce buttonC = Bounce(39, 10);
Bounce buttonFX1 = Bounce(41, 10);
Bounce buttonDown = Bounce(43, 10);
Bounce buttonUp = Bounce(45, 10);
Bounce buttonFX2 = Bounce(47, 10);
Bounce buttonTuner = Bounce(49, 10);
Bounce buttonE = Bounce(51, 10);
Bounce buttonD = Bounce(53, 10);

int bank = 0;
int patch = 0;
int program = 0;
int volume = 0;
int expression = 0;

bool fx = true;
bool fx2 = true;
bool tuner = false;

bool changed = true;

char charPatch[5] = "ABCDE";

const int ledD = 36;
const int ledE = 34; //Aaaaachtung!
const int ledTuner = 38;
const int ledFX2 = 40;
const int ledUp = 42;
const int ledDown = 44;
const int ledFX1 = 46;
const int ledC = 48;
const int ledB = 50;
const int ledA = 52;

//MIDI_CREATE_DEFAULT_INSTANCE();
 MIDI_CREATE_INSTANCE(HardwareSerial, Serial1, MIDI);
void setup() {
  Serial.begin(9600);
  MIDI.begin(MIDI_CHANNEL_OFF);

  pinMode(35, INPUT_PULLUP);
  pinMode(37, INPUT_PULLUP);
  pinMode(39, INPUT_PULLUP);
  pinMode(41, INPUT_PULLUP);
  pinMode(43, INPUT_PULLUP);
  pinMode(45, INPUT_PULLUP);
  pinMode(47, INPUT_PULLUP);
  pinMode(49, INPUT_PULLUP);
  pinMode(51, INPUT_PULLUP);
  pinMode(53, INPUT_PULLUP);

  pinMode(ledD, OUTPUT);
  pinMode(ledE, OUTPUT);
  pinMode(ledTuner, OUTPUT);
  pinMode(ledFX2, OUTPUT);
  pinMode(ledUp, OUTPUT);
  pinMode(ledDown, OUTPUT);
  pinMode(ledFX1, OUTPUT);
  pinMode(ledC, OUTPUT);
  pinMode(ledB, OUTPUT);
  pinMode(ledA, OUTPUT);

  Serial.println("Hallo, i bims de Footkontrolleur!");
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  display.clearDisplay();
  display.drawBitmap(0, 0,  logo, 128, 64, 1);
  display.display();
  ledInit();  
}

void loop() {
  updateButtonStates();
  processButtonStates();
  if (changed) {
    updateLEDStates();
    calculateProgramChange();
    changed = false;
  } 
}

void updateButtonStates() {
  buttonA.update();
  buttonB.update();
  buttonC.update();
  buttonD.update();
  buttonE.update();
  buttonUp.update();
  buttonDown.update();
  
  buttonFX1.update();  
  buttonFX2.update();
  
  buttonTuner.update(); 
}

void processButtonStates() {
  
 if (buttonUp.risingEdge()) {
    digitalWrite(ledUp, LOW);
 } 
 if (buttonUp.fallingEdge()) {
    digitalWrite(ledUp, HIGH);
    if (bank < 24) {
      bank++;
    }
    changed = true;
 }

 if (buttonDown.risingEdge()) {
    digitalWrite(ledDown, LOW);
 } 
 if (buttonDown.fallingEdge()) {
    digitalWrite(ledDown, HIGH);
    if (bank > 0) {
      bank--;
    }
    changed = true;
 }
 
 if (buttonA.fallingEdge() && buttonC.fallingEdge()) {
  Serial.println("Radomms");
 }
 if (buttonA.fallingEdge()) {
  patch = 0;
  changed = true;
 }
 
 if (buttonB.fallingEdge()) {
  patch = 1;
  changed = true;
 }
 
 if (buttonC.fallingEdge()) {
  patch = 2;
  changed = true;
 }
 
 if (buttonD.fallingEdge()) {
  patch = 3;
  changed = true;
 }
 
 if (buttonE.fallingEdge()) {
  patch = 4;
  changed = true;
 }
 
 if (buttonFX1.fallingEdge()) {
  fx = !fx;
  changed = true;
 }
 if (buttonFX2.fallingEdge()) {
  fx2 = !fx2;
  changed = true;
 }
 
 if (buttonTuner.fallingEdge()) {
    tuner = !tuner;
    changed = true;
 }
}

void updateLEDStates() {
  int leds[] = { ledA, ledB, ledC, ledD, ledE };
  
  digitalWrite(ledFX1, fx && !tuner ? HIGH : LOW);
  digitalWrite(ledFX2, fx2 && !tuner ? HIGH : LOW);
  digitalWrite(ledTuner, tuner ? HIGH : LOW);

  for (int i = 0; i < 5; i++) {
    if (i == patch && !tuner) {
      digitalWrite(leds[i], HIGH);
    } else {
      digitalWrite(leds[i], LOW);
    }
  }
}

void calculateProgramChange() {
  program = 5 * bank + patch;
  MIDI.sendProgramChange(program,1);
  Serial.print("Bank ");
  Serial.print(bank + 1);
  Serial.print(" Patch ");
  Serial.println(charPatch[patch]); 
  Serial.print("PC ");
  Serial.println(program);
  drawDisplay(50, bank+1,charPatch[patch],fx);
  
}
void drawDisplay(int level, int bank, char patch, bool fx) {
  display.clearDisplay();  

  display.setCursor(20,20);
  display.setTextSize(6);
  display.setTextColor(WHITE);
  if (bank < 10) {
    display.print(" ");
  }
  display.print(bank);
  display.print(patch);
  
  display.setCursor(100,0);
  display.setTextSize(2);
  
  if (fx) {
    display.setTextColor(BLACK, WHITE);
  }
  
  display.print("FX");
  
  int height = map(level, 0, 127, 0, 64);
  display.drawRect(5, 0, 15, 64, WHITE);
  display.fillRect(5, 64-height, 15, height, WHITE);
  display.display();
}

void ledInit() {
  int delayTime = 50;
  int leds[] = {ledD, ledE, ledTuner, ledFX2, ledUp, ledDown, ledC, ledB, ledA };
  for (int i = 0; i < 3; i++) {
    digitalWrite(leds[0], HIGH);
    delay(delayTime);
    for (int ii = 1; ii < 10; ii++) {
      digitalWrite(leds[ii-1], LOW);
      digitalWrite(leds[ii], HIGH);
      delay(delayTime);
    }
    digitalWrite(leds[9], LOW);
    delay(delayTime);
  }
}


